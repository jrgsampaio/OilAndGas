' *****  BASIC  *****
option explicit

' Constants used in the DAK correlation
const A1  =  0.3265
const A2  = -1.070
const A3  = -0.5339
const A4  =  0.01569
const A5  = -0.05165
const A6  =  0.5475
const A7  = -0.7361
const A8  =  0.1844
const A9  =  0.1056
const A10 =  0.6134
const A11 =  0.7210
'--------------------------------------

private function DAK(byval z as double, byval Pr as double, byval Tr as double) as double
'  This is the Dranchuk-Abou-Kassem Correlation
'	This function is defined to be used in the N-R method
	dim V0 as double : V0 = 0.27*Pr/Tr
	dim V1 as double : V1 =  (A1+A2/Tr+A3/Tr^3+A4/Tr^4+A5/Tr^5) * V0
	dim V2 as double : V2 = (A6+A7/Tr+A8/Tr^2) * V0^2
	dim V3 as double : V3 = -A9*(A7/Tr+A8/Tr^2) * V0^5
	dim V4 as double : V4 = A10 * V0^2/Tr^3
	dim V5 as double : V5 = A11 * V0^2

	DAK = 1.0 + V1/z + V2/z^2 + V3/z^5 + V4 * (1 + V5/z^2)/(z^2 * exp(V5/z^2)) - z
end function

private function dDAK(byval z as double, byval Pr as double, byval Tr as double) as double
'  This is the Dranchuk-Abou-Kassem Correlation
'  This function is the derivative of the function DAK, used in the N-R method
	dim V0 as double : V0 = 0.27*Pr/Tr
	dim V1 as double : V1 =  (A1+A2/Tr+A3/Tr^3+A4/Tr^4+A5/Tr^5) * V0
	dim V2 as double : V2 = (A6+A7/Tr+A8/Tr^2) * V0^2
	dim V3 as double : V3 = - A9*(A7/Tr+A8/Tr^2) * V0^5
	dim V4 as double : V4 = A10 * V0^2/Tr^3
	dim V5 as double : V5 = A11 * V0^2
	
'	dDAK =  -(V1*z^5 + 2*V2*z^4 + 5*V3*z - 2*V4 * (V5^2 - V5*z^2 - z^4)) / (z^7 * exp(V5/z^2)) - 1
	dDAK =  -(V1 + 2*V2*z^-1 + 5*V3*z^-3 - 2*V4 * (V5^2*z^-5 - V5*z^-3 - z^-1)) / (z^2 * exp(V5/z^2)) - 1
end function

function zfactorDAK(Pr as double, Tr as double, optional Seed as double, optional MaxIt as integer, optional Tol as double) as double
'	This function calculates the Compressibility factor for Natural Gas (z-factor)
'	using the Dranchuk-Abou-Kassem Correlation, which solves the EOS equation for z
'	iteratively using the Newton-Raphson schems to estimate the next value of z.
'	1st argument is the        pseudo-reduced pressure (Pr - dimensionless)
'	2nd argument is the pseudo-reduced temperature (Tr - dimensionless)
'	3rd argument (optional) is the Seed to start the iterative process (default 0.8)
'		The seed is helpful when a previous z was found for nearby Pr and/or Tr
'	4th argument (optional) is the maximum number of trials (default 200)
'	5th argument (optional) is the convergency tolerance (default 1e-6)
'	function return is the zfactor (dimensionless)
'	If the iteration scheme doesn't converge after MaxIt trials, returns -1
'	🄯 Jorge H B Sampaio Jr
'	jrgsampaio@gmail.com
'	Created: 04-Sep-2002 
'	Last update : 22-December-2023
'	Review on: 06-October-2008
'	Review on: 21-December-2023 (optional parameters, output = -1 if no convergency)
'	Review on: 22-December-2023 (optional Seed as the initial value for z
'	Review on: 22-December-2023 (introduved the private function DAK to promote the use of the Newton-Raphson scheme)
'	Review on: 22-December-2023 (Newton-Raphson method introduced to replace the simple Substitution scheme)
'	Review on: 10-January-2024 (replaced approximate derivative by exact derivative)
'			The function to find the root is g(z) = f(z)- z where z depends on itself by the function f(z)
'			The N-R method uses the iteration  zₙ₊₁ = zₙ - g(zₙ)/g'(zₙ)
'			where g'(zₙ) is the analytic derivative of g(zₙ)
'
'	GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007
'	The GNU General Public License is a free, copyleft license for software and other kinds of works.
'
	if IsMissing(Seed) then Seed = 0.8
	if IsMissing(MaxIt) then MaxIt = 200
	if IsMissing(Tol) then Tol = 1e-6

	dim last_z as double
	dim icount as integer
	dim rr as double
	dim z as double
	z = Seed
	icount = 0	
	do
		icount = icount+1
		if icount > MaxIt then	'the code steps into here if it does not converge in MaxIt iterations
			zfactorDAK = -1 ' returns -1 if no convergence occurs
			exit function
		endif
		last_z = z	' save previous value of z
		z = z - DAK(z,Pr,Tr) / dDAK(z,Pr, Tr) ' new z from Newton-Raphson Scheme
		if abs(z/last_z - 1.0) < Tol then	' Test the fractional error with the tolerance and exit if it passes
			zfactorDAK = z
			exit function
		endif
	loop
end function
